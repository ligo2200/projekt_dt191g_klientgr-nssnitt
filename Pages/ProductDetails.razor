@page "/product-details/{productId:int}"
@inject HttpClient Http


<div class="container mt-5 d-flex flex-column align-items-center">
    <h3 class="mt-5 text-center">@product?.TypeOfProduct</h3>

    @if (product != null)
    {
        <div class="card" style="width: 30rem; box-shadow: 1px 3px 5px gray;">
            <img src="@($"http://localhost:5244/images/{product.ImageName}")" class="card-img-top"
                style="height: 200px; object-fit: cover;" alt="Produktbild">
            <div class="card-body">
                <h5 class="card-title">@product.TypeOfProduct</h5>
                <p class="card-text">Pris: @product.Price kr</p>
                <p class="card-text">Storlek: @product.Size</p>
                <p class="card-text">Färg: @product.Color</p>
                <p class="card-text">Beskrivning: @product.Description</p>
                <div class="d-flex justify-content-center">
                    <a href="javascript:void(0);" class="btn btn-secondary" @onclick="() => AddToCart(product)">Köp nu</a>
                </div>

            </div>
        </div>
    }
    else
    {
        <p>Laddar produkt...</p>
    }

    <div class="text-center mt-4">
        <a href="http://localhost:5192/category/14" class="btn btn-link" style="font-size: 1.2rem;">Tillbaka till
            Överdelar</a>
    </div>

</div>
@code {
    [Parameter] public int productId { get; set; }

    private Product? product;

    protected override async Task OnParametersSetAsync()
    {
        try
        {
            product = await Http.GetFromJsonAsync<Product>($"http://localhost:5244/api/Api/products/{productId}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Ett fel inträffade vid hämtning av produkten: {ex.Message}");
        }
    }

    public class Product
    {
        public int ProductId { get; set; }
        public string TypeOfProduct { get; set; }
        public int Price { get; set; }
        public string Size { get; set; }
        public string Color { get; set; }
        public string Description { get; set; }
        public string ImageName { get; set; }
    }

    // Funktion för att lägga till en produkt i kundvagnen
    public void AddToCart(Product product)
    {
        // Hämta befintlig kundvagn från localStorage
        var cart = GetCart();

        // Lägg till produkten till kundvagnen
        cart.Add(product);

        // Spara tillbaka kundvagnen till localStorage
        SaveCart(cart);

        // Uppdatera kundvagnsantalet
        UpdateCartCount();
    }

    // Hämta kundvagnen från localStorage
    private List<Product> GetCart()
    {
        var cartJson = localStorage.GetItem("cart");
        if (cartJson != null)
        {
            return JsonSerializer.Deserialize<List<Product>>(cartJson);
        }
        return new List<Product>();
    }

    // Spara kundvagnen till localStorage
    private void SaveCart(List<Product> cart)
    {
        var cartJson = JsonSerializer.Serialize(cart);
        localStorage.SetItem("cart", cartJson);
    }

    // Uppdatera antalet produkter i kundvagnen
    private void UpdateCartCount()
    {
        var cart = GetCart();
        var cartCountElement = document.getElementById("cart-count");
        if (cartCountElement != null)
        {
            cartCountElement.innerText = cart.Count.ToString();
        }
    }

    // När komponenten laddas, uppdatera kundvagnsantalet
    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            UpdateCartCount();
        }
    }
}

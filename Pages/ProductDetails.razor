@page "/product-details/{productId:int}"
@inject HttpClient Http
@using Blazored.LocalStorage
@inject ILocalStorageService localStorage
@inject NavigationManager navManager
@inject NavigationManager Navigation
@using ClientApp.Services
@inject CartService CartService


<div class="container mt-5 d-flex flex-column align-items-center">
    <h3 class="mt-5 text-center">@product?.TypeOfProduct</h3>

    @if (product != null)
    {
        <div class="card" style="width: 30rem; box-shadow: 1px 3px 5px gray;">
            <img src="@($"http://localhost:5244/images/{product.ImageName}")" class="card-img-top"
                style="height: 200px; object-fit: cover;" alt="Produktbild">
            <div class="card-body">
                <h5 class="card-title">@product.TypeOfProduct</h5>
                <p class="card-text">Pris: @product.Price kr</p>
                <p class="card-text">Storlek: @product.Size</p>
                <p class="card-text">Färg: @product.Color</p>
                <p class="card-text">Beskrivning: @product.Description</p>
                <div class="d-flex justify-content-center">
                    <button class="btn btn-secondary" @onclick="AddToCart" disabled="@isAddedToCart">@if (isAddedToCart)
                        {
                            <span class="blockdisplay">Tillagd i kundvagn</span>
                        }
                        else
                        {
                            <span class="blockdisplay">Köp nu</span>
                        }</button>
                </div>

            </div>
        </div>
    }
    else
    {
        <p>Laddar produkt...</p>
    }

    <div class="text-center mt-4">
        <button @onclick="NavigateBackToCategory" class="btn btn-link" style="font-size: 1.2rem;">Tillbaka till
            Kategori</button>
    </div>

</div>

<style>
    .blockdisplay {
        display: block;
    }
</style>

@code {
    [Parameter] public int productId { get; set; }

    private Product? product;

    private bool isAddedToCart = false;

    private void NavigateBackToCategory()
    {
        navManager.NavigateTo($"/category/{product.CategoryId}");
    }

    protected override async Task OnParametersSetAsync()
    {
        try
        {
            product = await Http.GetFromJsonAsync<Product>($"http://localhost:5244/api/Api/products/{productId}");

            // check if product have been added
            var cart = await localStorage.GetItemAsync<List<int>>("cart") ?? new List<int>();
            isAddedToCart = cart.Contains(productId);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Ett fel inträffade vid hämtning av produkten: {ex.Message}");
        }
    }

    private async Task AddToCart()
    {
        var cart = await localStorage.GetItemAsync<List<int>>("cart") ?? new List<int>();
        if (!cart.Contains(productId))
        {
            cart.Add(productId);
            await localStorage.SetItemAsync("cart", cart);

            isAddedToCart = true; // deactivating button

            // Update cart with cartService
            CartService.AddToCart();
        }

        // Go back to category
        if (product != null && product.CategoryId != 0)
        {
            navManager.NavigateTo($"/category/{product.CategoryId}");
        }
        else
        {
            Console.WriteLine("Produkt eller CategoryId saknas!");
        }
    }

    public class Product
    {
        public int ProductId { get; set; }
        public string TypeOfProduct { get; set; }
        public int Price { get; set; }
        public string Size { get; set; }
        public string Color { get; set; }
        public string Description { get; set; }
        public string ImageName { get; set; }
        public int CategoryId { get; set; }
    }
}